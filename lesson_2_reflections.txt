What happens when you initialize a repository? Why do you need to do it?

When the repository is initialized Git gets all the information and sets up the structure for
the repository. It is needed in order to create a fresh environment for the project and initialize
the system.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory in that it allows you to choose
files from the working directory to add to or remove from the next commit without add/deleting
the actual files. It is different from the repository because the staging area holds the files
that are going to be included in the repository during the next commit. The staging area gives the
user control over what is going to be committed to the repository (instead of just committing
everything). If multiple logical changes were made since the last commit, it allows the user to
separate the files into multiple commits.

How can you use the staging area to make sure you have one commit per logical
change?

The staging area can be used to have one commit per logical change by only adding the files that
were associated with the change to the staging area. When the commit is executed, only those
files in the staging area will be associated with the commit. Any files that are not a part 
of the logical change, but which have been modified, will be listed as modified files that need
to be committed. git diff and git diff --staged can be used to make sure that only the files
that the user wants as part of the change to be committed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
