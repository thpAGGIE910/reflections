What happens when you initialize a repository? Why do you need to do it?

When the repository is initialized Git gets all the information and sets up the structure for
the repository. It is needed in order to create a fresh environment for the project and initialize
the system.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different from the working directory in that it allows you to choose
files from the working directory to add to or remove from the next commit without add/deleting
the actual files. It is different from the repository because the staging area holds the files
that are going to be included in the repository during the next commit. The staging area gives the
user control over what is going to be committed to the repository (instead of just committing
everything). If multiple logical changes were made since the last commit, it allows the user to
separate the files into multiple commits.

How can you use the staging area to make sure you have one commit per logical
change?

The staging area can be used to have one commit per logical change by only adding the files that
were associated with the change to the staging area. When the commit is executed, only those
files in the staging area will be associated with the commit. Any files that are not a part 
of the logical change, but which have been modified, will be listed as modified files that need
to be committed. git diff and git diff --staged can be used to make sure that only the files
that the user wants as part of the change to be committed.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

Branches are helpful if the programmer is adding a new feature to the project or an altering
the working version of the project in some way. Branches help by creating another version of 
the project. If the programmer switches to the new branch and, during the course of modfiying
the branched version, breaks the project, the breaking change only affects the branched version;
the master branch (which hopefully has a working version of the project) will be unaffected and
should run normally.

How do the diagrams help you visualize the branch structure?

The diagrams help be displaying the develpopment path(s) that exist in the project.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together brings all the changes from each branch together to create a new
main branch with the features, bug fixes, etc. from each branch included. This allows multiple
programmers to work on different parts of the project at the same time. Once the programmer is
confident that the feature or fix works, the work can be joined with the existing code base
to incorporate the work into the main project. The diagram is represented that way because it
shows the divergence between the main code base and the additional feature that is being
worked on in the branch.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

The pro of automatic merging is that the programmer doesn't have to know when other programmers
have made changes to other parts of the code base. This allows for rapid development by breaking
up tasks to multiple programmers. One programmer doesn't always need to know what others have
changed. The major con of automatic merging occurs when more than one programmer is working on
the same piece(s) of code, creating a merge conflict. The pro of manual merging allows making a 
concrete choice of what code should be used. The con of manual merging is having to make a,
possibly uninformed decision, on the code that will be included in the project.

